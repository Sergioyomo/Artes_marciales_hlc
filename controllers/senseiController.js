// Importar libreria para respuestas
const Respuesta = require("../utils/respuesta");
const { logMensaje } = require("../utils/logger.js");
// Recuperar función de inicialización de modelos
const initModels = require("../models/init-models.js").initModels;
// Crear la instancia de sequelize con la conexión a la base de datos
const sequelize = require("../config/sequelize.js");

// Cargar las definiciones del modelo en sequelize
const models = initModels(sequelize);
// Recuperar el modelo plato
const Sensei = models.sensei;

class SenseiController {
  async createSensei(req, res) {
    // Implementa la lógica para crear un nuevo plato
    const sensei = req.body;

    try {
      const senseiNuevo = await Sensei.create(sensei);

      res.status(201).json(Respuesta.exito(senseiNuevo, "Sensei insertado"));
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(Respuesta.error(null, `Error al crear un sensei nuevo: ${sensei}`));
    }
  }

  async deleteSensei(req, res) {
    const idSensei = req.params.idSensei;
    try {
      const numFilas = await Sensei.destroy({
        where: {
          idSensei: idSensei,
        },
      });
      if (numFilas == 0) {
        // No se ha encontrado lo que se quería borrar
        res
          .status(404)
          .json(Respuesta.error(null, "No encontrado: " + idSensei));
      } else {
        res.status(204).send();
      }
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al eliminar los datos: ${req.originalUrl}`
          )
        );
    }
  }

  async getSenseiById(req, res) {
    // El id plato viene en la ruta /api/platos/:idplato
    const idSensei = req.params.idSensei;
    try {
      const fila = await Sensei.findByPk(idSensei);
      if (fila) {
        // Si se ha recuprado un plato
        res.json(Respuesta.exito(fila, "Sensei recuperado"));
      } else {
        res.status(404).json(Respuesta.error(null, "Sensei no encontrado"));
      }
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al recuperar los datos: ${req.originalUrl}`
          )
        );
    }
  }

  async updateSensei(req, res) {
    const sensei = req.body; // Recuperamos datos para actualizar
    const idSensei = req.params.idSensei; // dato de la ruta

    // Petición errónea, no coincide el id del plato de la ruta con el del objeto a actualizar
    if (idSensei != sensei.idSensei) {
      return res
        .status(400)
        .json(Respuesta.error(null, "El id del sensei no coincide"));
    }

    try {
      const numFilas = await Sensei.update({ ...sensei }, { where: { idSensei } });

      if (numFilas == 0) {
        // No se ha encontrado lo que se quería actualizar o no hay nada que cambiar
        res
          .status(404)
          .json(Respuesta.error(null, "No encontrado o no modificado: " + idSensei));
      } else {
        // Al dar status 204 no se devuelva nada
        // res.status(204).json(Respuesta.exito(null, "Plato actualizado"));
        res.status(204).send();
      }
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al actualizar los datos: ${req.originalUrl}`
          )
        );
    }
  }
  async getFilteredSensei(req, res) {
    try {
        const filters = {};
        
        // Recorremos los parámetros de la query y los añadimos a los filtros
        for (const key in req.query) {
            if (Object.prototype.hasOwnProperty.call(Sensei.rawAttributes, key)) {
                filters[key] = req.query[key];
            }
        }

        const senseis = await Sensei.findAll({ where: filters });

        res.json(Respuesta.exito(senseis, "Senseis filtrados"));
    } catch (err) {
        logMensaje("Error :" + err);
        res.status(500).json(Respuesta.error(null, `Error al recuperar senseis filtrados: ${req.originalUrl}`));
    }
  }
}

module.exports = new SenseiController();

// Structure of result (MySQL)
// {
//   fieldCount: 0,
//   affectedRows: 1, // Number of rows affected by the query
//   insertId: 1,     // ID generated by the insertion operation
//   serverStatus: 2,
//   warningCount: 0,
//   message: '',
//   protocol41: true,
//   changedRows: 0   // Number of rows changed by the query
// }
